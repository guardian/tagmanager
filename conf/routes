# Handled by client side code
GET            /                                                       controllers.App.index(id = "")
GET            /tag/create                                             controllers.App.index(id = "")
GET            /tag/:id                                                controllers.App.index(id)
GET            /batch                                                  controllers.App.index(id = "")
GET            /merge                                                  controllers.App.index(id = "")
GET            /audit                                                  controllers.App.index(id = "")
GET            /status                                                 controllers.App.index(id = "")
GET            /unauthorised                                           controllers.App.index(id = "")
GET            /mapping                                                controllers.App.index(id = "")
GET            /section                                                controllers.App.index(id = "")
GET            /section/:id                                            controllers.App.index(id)
GET            /pillar                                                 controllers.App.index(id = "")
GET            /pillar/:id                                             controllers.App.index(id)
GET            /sponsorship                                            controllers.App.index(id = "")
GET            /sponsorship/create                                     controllers.App.index(id = "")
GET            /sponsorship/:id                                        controllers.App.index(id)
GET            /microsite                                              controllers.App.index(id = "")
GET            /microsite/:id                                          controllers.App.index(id)
GET            /spreadsheets                                           controllers.App.index(id = "")



# API
GET            /api/tags                                               controllers.TagManagementApi.searchTags()
POST           /api/tag                                                controllers.TagManagementApi.createTag()

GET            /api/tag/:id                                            controllers.TagManagementApi.getTag(id: Long)
PUT            /api/tag/:id                                            controllers.TagManagementApi.updateTag(id: Long)
DELETE         /api/tag/:id                                            controllers.TagManagementApi.deleteTag(id: Long)

GET            /api/sections                                           controllers.TagManagementApi.listSections()
POST           /api/section                                            controllers.TagManagementApi.createSection()
GET            /api/section/:id                                        controllers.TagManagementApi.getSection(id: Long)
PUT            /api/section/:id                                        controllers.TagManagementApi.updateSection(id: Long)
POST           /api/section/:id/edition                                controllers.TagManagementApi.addEditionToSection(id: Long)
DELETE         /api/section/:id/edition/:editionName                   controllers.TagManagementApi.removeEditionFromSection(id: Long, editionName: String)

GET            /api/pillars                                            controllers.TagManagementApi.listPillars()
POST           /api/pillar                                             controllers.TagManagementApi.createPillar()
GET            /api/pillar/:id                                         controllers.TagManagementApi.getPillar(id: Long)
PUT            /api/pillar/:id                                         controllers.TagManagementApi.updatePillar(id: Long)
DELETE         /api/pillar/:id                                         controllers.TagManagementApi.deletePillar(id: Long)

GET            /api/sponsorships                                       controllers.TagManagementApi.searchSponsorships()
GET            /api/sponsorship/:id                                    controllers.TagManagementApi.getSponsorship(id: Long)
POST           /api/sponsorship                                        controllers.TagManagementApi.createSponsorship()
PUT            /api/sponsorship/:id                                    controllers.TagManagementApi.updateSponsorship(id: Long)
GET            /api/clashingSponsorships                               controllers.TagManagementApi.clashingSponsorships(id: Option[Long], tagIds: Option[String], sectionIds: Option[String], validFrom: Option[Long], validTo: Option[Long], editions: Option[String])
GET            /api/tag/:id/activeSponsorships                         controllers.TagManagementApi.activeSponsorshipsForTag(id: Long)
GET            /api/section/:id/activeSponsorships                     controllers.TagManagementApi.activeSponsorshipsForSection(id: Long)

GET            /api/referenceTypes                                     controllers.TagManagementApi.listReferenceTypes()

GET            /api/checkPathInUse                                     controllers.TagManagementApi.checkPathInUse(tagType: String, slug: String, section: Option[Long], tagSubType: Option[String])
POST           /api/batchTag                                           controllers.TagManagementApi.batchTag()
POST           /api/mergeTag                                           controllers.TagManagementApi.mergeTag()


GET            /api/audit/tag/:tagId                                   controllers.TagManagementApi.getAuditForTag(tagId: Long)
GET            /api/audit/tag/operation/:op                            controllers.TagManagementApi.getAuditForTagOperation(op: String)

GET            /api/audit/section/:sectionId                           controllers.TagManagementApi.getAuditForSection(sectionId: Long)
GET            /api/audit/section/operation/:op                        controllers.TagManagementApi.getAuditForSectionOperation(op: String)

GET            /api/jobs                                               controllers.TagManagementApi.getJobs(tagId: Option[Long])
DELETE         /api/jobs/:id                                           controllers.TagManagementApi.deleteJob(id: Long)
PUT            /api/jobs/rollback/:id                                  controllers.TagManagementApi.rollbackJob(id: Long)

POST           /api/spreadsheet                                        controllers.TagManagementApi.spreadsheet()

POST           /reindex/tags                                           controllers.Reindex.reindexTags()
GET            /reindex/tags                                           controllers.Reindex.getTagReindexProgress()
POST           /reindex/sections                                       controllers.Reindex.reindexSections()
GET            /reindex/sections                                       controllers.Reindex.getSectionReindexProgress()
POST           /reindex/pillars                                        controllers.Reindex.reindexPillars()
GET            /reindex/pillars                                        controllers.Reindex.getPillarReindexProgress()


# Hypmedia API
GET            /hyper                                                  controllers.HyperMediaApi.hyper()
GET            /hyper/tags                                             controllers.HyperMediaApi.tags()
GET            /hyper/tags/:id                                         controllers.HyperMediaApi.tag(id: Long)
GET            /hyper/tags/:id/sponsorships                            controllers.HyperMediaApi.tagSponsorships(id: Long)
GET            /hyper/sponsorships/:id                                 controllers.HyperMediaApi.sponsorship(id: Long)
OPTIONS        /*all                                                   controllers.HyperMediaApi.preflight(all: String)

# Tag export for inCopy
GET            /tags/export/all                                        controllers.ReadOnlyApi.getTagsAsXml()
GET            /tags/export/single/:id                                 controllers.ReadOnlyApi.tagAsXml(id: Long)
GET            /tags/export/merges/:since                              controllers.ReadOnlyApi.mergesAsXml(since: Long)

GET            /sections/export/all                                    controllers.ReadOnlyApi.getSectionsAsXml()


# More newspaper integration
GET            /tools/newspaperintegration/tags/modified/:since        controllers.ReadOnlyApi.modifiedAsXml(since: Long)
GET            /tools/newspaperintegration/tags/merges/:since          controllers.ReadOnlyApi.mergesAsXml(since: Long)
GET            /tools/newspaperintegration/tags/deleted/:since         controllers.ReadOnlyApi.deletesAsXml(since: Long)
GET            /tools/newspaperintegration/tags/created/:since         controllers.ReadOnlyApi.createsAsXml(since: Long)


GET            /oauthCallback                                          controllers.Login.oauthCallback()
GET            /logout                                                 controllers.Login.logout()
GET            /reauth                                                 controllers.Login.reauth()

# Management
+anyhost
GET            /management/manifest                                    controllers.Management.manifest()
GET            /management/healthcheck                                 controllers.Management.healthCheck()

# Map static resources from the /public folder to the /assets URL path
GET            /assets/*file                                           controllers.Assets.versioned(path="/public", file: Asset)

# Support routes
GET            /support/image-metadata                                 controllers.Support.imageMetadata(imageUrl: String)
POST           /support/uploadLogo/:filename                           controllers.Support.uploadLogo(filename: String)
GET            /support/previewCapi/*path                              controllers.Support.previewCapiProxy(path: String)
GET            /support/flexPathMigrationData                          controllers.Support.flexPathMigrationSpecificData()
GET            /support/flexSlugMigrationData                          controllers.Support.flexSlugMigrationSpecificData()

POST           /support/unexpireSectionContent                         controllers.Support.unexpireSectionContent()
POST           /support/expireSectionContent                           controllers.Support.expireSectionContent()

# TODO DELETE THIS
POST           /support/unexpireTag                                    controllers.Support.unexpireTag()

GET            /support/fixDanglingParents                             controllers.Support.fixDanglingParents()

# Migration endpoints
GET            /migration/paidContent                                  controllers.Migration.showPaidContentUploadForm()
POST           /migration/paidContent                                  controllers.Migration.migratePaidContent()
GET            /migration/moveToSections                               controllers.Migration.movePaidcontentSponsorshipUpToSection()
GET            /migration/flattenSponsoredMicrosite/:sponsId           controllers.Migration.flattenSponsoredMicrosite(sponsId: Long)
GET            /migration/addMissingPaidContentTypes                   controllers.Migration.addMissingPaidContentTypes()
GET            /migration/dudupeActiveSponsorships                     controllers.Migration.dudupeActiveSponsorships()


